#
# This ontology is automatically written by the FRaMED OWL Ontology generator
#
# The following features are not supported:
#		Compartment inheritance
#		Compartments that play a role in another compartment
#
Prefix: owl: <http://www.w3.org/2002/07/owl#>
Prefix: rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
Prefix: xml: <http://www.w3.org/XML/1998/namespace>
Prefix: xsd: <http://www.w3.org/2001/XMLSchema#>
Prefix: rdfs: <http://www.w3.org/2000/01/rdf-schema#>

Prefix: rosi: <http://www.rosi-project.org/ontologies#>

Ontology: <http://www.rosi-project.org/ontologies/2016-11-01/Bank>








#
# Used OWL datatypes
#

Datatype: xsd:boolean


#
# Used OWL annotations
#

AnnotationProperty: <rosi:rigidity>
    Range: <http://www.w3.org/2001/XMLSchema#boolean>

AnnotationProperty: <rosi:isMeta>
    Range: <http://www.w3.org/2001/XMLSchema#boolean>

AnnotationProperty: rdfs:isDefinedBy







#
# General axioms and declarations, independent of the CROModel
#
Class: owl:Thing
    SubClassOf:
        <rosi:MetaIsBottom>,
        <rosi:ObjectIsTop>,
        <rosi:DomainOfPlaysIsNaturalTypes>,
        <rosi:RangeOfPlaysIsRoleTypes>,
        <rosi:ObjectTopIsRoleOrNatural>,
        <rosi:NaturalTypesDisjointAxiom>,
        <rosi:RoleTypesDisjointAxiom>,
        <rosi:NaturalTypesAreObjectLevel>,
        <rosi:RoleTypesAreObjectLevel>,
        <rosi:EveryRoleIsPlayedOnce>,
        <rosi:NaturalTypeInheritance>,
        <rosi:RolePlayerDeclarations>
    DisjointUnionOf:
         Annotations: rdfs:isDefinedBy <rosi:ObjectTopIsRoleOrNatural>
         <rosi:NaturalTypes>, <rosi:RoleTypes>

Class: owl:Nothing
Class: <rosi:ObjectTopIsRoleOrNatural>
Class: <rosi:MetaIsBottom>
Class: <rosi:ObjectIsTop>
Class: <rosi:Meta>
    EquivalentTo:
        owl:Thing,
        Annotations: rdfs:isDefinedBy <rosi:MetaIsBottom>
   	    owl:Nothing

Class: <rosi:Object>
    EquivalentTo:
        owl:Nothing,
        Annotations: rdfs:isDefinedBy <rosi:ObjectIsTop>
        owl:Thing

Class: <rosi:DomainOfPlaysIsNaturalTypes>
Class: <rosi:RangeOfPlaysIsRoleTypes>
Class: <rosi:NaturalTypesDisjointAxiom>
Class: <rosi:NaturalTypesAreObjectLevel>
Class: <rosi:RoleTypesDisjointAxiom>
Class: <rosi:RoleTypesAreObjectLevel>
Class: <rosi:EveryRoleIsPlayedOnce>






#
# The declaration of all compartment types that occur in the model
#
Class: <rosi:CompartmentTypes>
    DisjointUnionOf: <rosi:Transaction>, <rosi:Bank>

Class: <rosi:Transaction>
Class: <rosi:Bank>






#
# The declaration of all natural types that occur in the model
#
Class: <rosi:NaturalTypeInheritanceCompanyPerson>
Class: <rosi:NaturalTypeInheritanceCompanyTestNaturalType>
Class: <rosi:NaturalTypeInheritanceTestNaturalTypePerson>
Class: <rosi:NaturalTypeInheritance>
    SubClassOf: <rosi:NaturalTypeInheritanceCompanyPerson>
    SubClassOf: <rosi:NaturalTypeInheritanceCompanyTestNaturalType>
    SubClassOf: <rosi:NaturalTypeInheritanceTestNaturalTypePerson>

Class: <rosi:NaturalTypes>
    SubClassOf:
        Annotations: rdfs:isDefinedBy <rosi:NaturalTypesAreObjectLevel>
        <rosi:Object>
    DisjointUnionOf:
        Annotations: rdfs:isDefinedBy <rosi:NaturalTypesDisjointAxiom>
        <rosi:Person>, <rosi:Account>


Class: <rosi:Person>
    Annotations: <rosi:rigidity> true

Class: <rosi:Company>
    Annotations: <rosi:rigidity> true
    SubClassOf: 
        Annotations: rdfs:isDefinedBy <rosi:NaturalTypeInheritanceCompanyPerson>
        <rosi:Person>, 
        Annotations: rdfs:isDefinedBy <rosi:NaturalTypeInheritanceCompanyTestNaturalType>
        <rosi:TestNaturalType>

Class: <rosi:Account>
    Annotations: <rosi:rigidity> true

Class: <rosi:TestNaturalType>
    Annotations: <rosi:rigidity> true
    SubClassOf: 
        Annotations: rdfs:isDefinedBy <rosi:NaturalTypeInheritanceTestNaturalTypePerson>
        <rosi:Person>







#
# The declaration of all role types that occur in the model
#
Class: <rosi:PlaysSourceDeclaration>
Class: <rosi:PlaysTargetDeclaration>
Class: <rosi:PlaysConsultantDeclaration>
Class: <rosi:PlaysCustomerDeclaration>
Class: <rosi:PlaysMoneyTransferDeclaration>
Class: <rosi:PlaysCheckingsAccountDeclaration>
Class: <rosi:PlaysSavingsAccountDeclaration>
Class: <rosi:RolePlayerDeclarations>
    SubClassOf: <rosi:PlaysSourceDeclaration>
    SubClassOf: <rosi:PlaysTargetDeclaration>
    SubClassOf: <rosi:PlaysConsultantDeclaration>
    SubClassOf: <rosi:PlaysCustomerDeclaration>
    SubClassOf: <rosi:PlaysMoneyTransferDeclaration>
    SubClassOf: <rosi:PlaysCheckingsAccountDeclaration>
    SubClassOf: <rosi:PlaysSavingsAccountDeclaration>

Class: <rosi:RoleTypes>
    SubClassOf:
        Annotations: rdfs:isDefinedBy <rosi:RoleTypesAreObjectLevel>
        <rosi:Object>
    SubClassOf:
        Annotations: rdfs:isDefinedBy <rosi:EveryRoleIsPlayedOnce>
        inverse (<rosi:plays>) exactly 1 owl:Thing
    DisjointUnionOf:
        Annotations: rdfs:isDefinedBy <rosi:RoleTypesDisjointAxiom>
        <rosi:Source>, <rosi:Target>, <rosi:Consultant>, <rosi:Customer>, <rosi:MoneyTransfer>, <rosi:CheckingsAccount>, <rosi:SavingsAccount>

Class: <rosi:Source>
    Annotations: <rosi:rigidity> false
Class: <rosi:PlaysSource>
    EquivalentTo:
        Annotations: rdfs:isDefinedBy <rosi:PlaysSourceDeclaration>
        <rosi:plays> some <rosi:Source>

Class: <rosi:Target>
    Annotations: <rosi:rigidity> false
Class: <rosi:PlaysTarget>
    EquivalentTo:
        Annotations: rdfs:isDefinedBy <rosi:PlaysTargetDeclaration>
        <rosi:plays> some <rosi:Target>

Class: <rosi:Consultant>
    Annotations: <rosi:rigidity> false
Class: <rosi:PlaysConsultant>
    EquivalentTo:
        Annotations: rdfs:isDefinedBy <rosi:PlaysConsultantDeclaration>
        <rosi:plays> some <rosi:Consultant>
    SubClassOf:
        Annotations: rdfs:isDefinedBy <rosi:Bank>
        <rosi:Person>

Class: <rosi:Customer>
    Annotations: <rosi:rigidity> false
Class: <rosi:PlaysCustomer>
    EquivalentTo:
        Annotations: rdfs:isDefinedBy <rosi:PlaysCustomerDeclaration>
        <rosi:plays> some <rosi:Customer>
    SubClassOf:
        Annotations: rdfs:isDefinedBy <rosi:Bank>
        <rosi:Company> or <rosi:Person>

Class: <rosi:MoneyTransfer>
    Annotations: <rosi:rigidity> false
Class: <rosi:PlaysMoneyTransfer>
    EquivalentTo:
        Annotations: rdfs:isDefinedBy <rosi:PlaysMoneyTransferDeclaration>
        <rosi:plays> some <rosi:MoneyTransfer>
    SubClassOf:
        Annotations: rdfs:isDefinedBy <rosi:Bank>
        <rosi:Transaction>

Class: <rosi:CheckingsAccount>
    Annotations: <rosi:rigidity> false
Class: <rosi:PlaysCheckingsAccount>
    EquivalentTo:
        Annotations: rdfs:isDefinedBy <rosi:PlaysCheckingsAccountDeclaration>
        <rosi:plays> some <rosi:CheckingsAccount>
    SubClassOf:
        Annotations: rdfs:isDefinedBy <rosi:Bank>
        <rosi:Account>

Class: <rosi:SavingsAccount>
    Annotations: <rosi:rigidity> false
Class: <rosi:PlaysSavingsAccount>
    EquivalentTo:
        Annotations: rdfs:isDefinedBy <rosi:PlaysSavingsAccountDeclaration>
        <rosi:plays> some <rosi:SavingsAccount>
    SubClassOf:
        Annotations: rdfs:isDefinedBy <rosi:Bank>
        <rosi:Account>






#
# The declaration of the plays relation as OWL object property
#

ObjectProperty: owl:bottomObjectProperty

ObjectProperty: <rosi:plays>
    Domain:
        Annotations: rdfs:isDefinedBy <rosi:DomainOfPlaysIsNaturalTypes>
        <rosi:NaturalTypes>
    Range:
        Annotations: rdfs:isDefinedBy <rosi:RangeOfPlaysIsRoleTypes>
        <rosi:RoleTypes>
    SubPropertyOf:
        owl:bottomObjectProperty



# builder.fills
# [Person->Bank->Consultant, Person->Bank->Customer, Account->Bank->CheckingsAccount, Account->Bank->SavingsAccount, Account->Bank->CheckingsAccount, Account->Bank->SavingsAccount, Transaction->Bank->MoneyTransfer, Company->Bank->Customer]
#
# [Person->Consultant, Person->Customer, Account->CheckingsAccount, Account->SavingsAccount, Account->CheckingsAccount, Account->SavingsAccount, Transaction->MoneyTransfer, Company->Customer]
#
# builder.ntinh
# [TestNaturalType->Person, Company->Person, Company->TestNaturalType]
#
# builder.ctinh
# []
#
# builder.card
# {trans->Transaction=(1,1)->(1,1), own_sa->Bank=(1,inf)->(0,inf), own_ca->Bank=(0,inf)->(1,1), advices->Bank=(0,inf)->(1,inf)}
#
# builder.rel
# {trans->Transaction=Source->Target, own_sa->Bank=Customer->SavingsAccount, own_ca->Bank=CheckingsAccount->Customer, advices->Bank=Consultant->Customer}
#
# builder.rst
# [trans, own_ca, advices, own_sa]
#
# builder.toString
# builder.CROModel@33aad6f5
#
#
#
# TODO: still unhandled
# compartment types
# annotations to get object axioms to object level
# fills relation and domain, range of plays
# parts relation
# rel
#
# Contraint model:
# rolec
# card
# intra
# inter
#
#
